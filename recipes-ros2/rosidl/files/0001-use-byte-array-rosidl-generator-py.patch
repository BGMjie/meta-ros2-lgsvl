diff --git a/resource/_msg.py.em b/resource/_msg.py.em
index 4934726..69ffee2 100644
--- a/resource/_msg.py.em
+++ b/resource/_msg.py.em
@@ -17,6 +17,23 @@
 import logging
 import traceback
 
+@[if len(spec.fields) > 0]@
+@[  for field in spec.fields]@
+@[    if field.default_value]@
+@[    else]@
+@[      if not field.type.is_primitive_type() and (not field.type.is_array or
+          (field.type.array_size and not field.type.is_upper_bound))]@
+@[        if field.type.pkg_name == package_name]@
+from @(field.type.pkg_name).msg._@(field.type.module_name) import @(field.type.type)
+@[        else]@
+from @(field.type.pkg_name).msg import @(field.type.type)
+@[        end if]@
+@[      end if]@
+@[    end if]@
+@[  end for]@
+@[end if]@
+
+
 
 class Metaclass(type):
     """Metaclass of message '@(spec.base_type.type)'."""
@@ -126,7 +143,7 @@ class @(spec.base_type.type)(metaclass=Metaclass):
 @[    else]@
 @[      if not field.type.is_primitive_type() and (not field.type.is_array or
           (field.type.array_size and not field.type.is_upper_bound))]@
-        from @(field.type.pkg_name).msg import @(field.type.type)
+        #from @(field.type.pkg_name).msg import @(field.type.type)
 @[      end if]@
 @[      if field.type.array_size and not field.type.is_upper_bound]@
 @[        if field.type.type == 'byte']@
@@ -173,22 +190,23 @@ class @(spec.base_type.type)(metaclass=Metaclass):
 
     @@@(field.name).setter
     def @(field.name)(self, value):
+        if __debug__:
 @[  if not field.type.is_primitive_type()]@
-        from @(field.type.pkg_name).msg import @(field.type.type)
+          from @(field.type.pkg_name).msg import @(field.type.type)
 @[  end if]@
 @[  if field.type.is_array]@
-        from collections import Sequence
-        from collections import Set
-        from collections import UserList
-        from collections import UserString
+          from collections import Sequence
+          from collections import Set
+          from collections import UserList
+          from collections import UserString
 @[  elif field.type.string_upper_bound]@
-        from collections import UserString
+          from collections import UserString
 @[  elif field.type.type == 'byte']@
-        from collections import ByteString
+          from collections import ByteString
 @[  elif field.type.type in ['char']]@
-        from collections import UserString
+          from collections import UserString
 @[  end if]@
-        assert \
+          assert \
 @[  if field.type.is_array]@
             ((isinstance(value, Sequence) or
               isinstance(value, Set) or
diff --git a/resource/_msg_support.c.em b/resource/_msg_support.c.em
index 93605fc..52b185d 100644
--- a/resource/_msg_support.c.em
+++ b/resource/_msg_support.c.em
@@ -103,8 +103,9 @@ full_classname = '%s.%s._%s.%s' % (spec.base_type.pkg_name, subfolder, module_na
 nested_type = '%s__%s__%s' % (field.type.pkg_name, 'msg', field.type.type)
 }@
     typedef PyObject *(* convert_from_py_signature)(void *);
-    convert_from_py_signature convert_from_py = NULL;
+    static convert_from_py_signature convert_from_py = NULL;    
     // get conversion function
+    if (convert_from_py == NULL)
     {
       PyObject * msg_module = PyImport_ImportModule("@(field.type.pkg_name).msg._@convert_camel_case_to_lower_case_underscore(field.type.type)");
       if (!msg_module) {
@@ -160,15 +161,19 @@ nested_type = '%s__%s__%s' % (field.type.pkg_name, 'msg', field.type.type)
     Py_ssize_t size = @(field.type.array_size);
     @(nested_type) * dest = ros_message->@(field.name);
 @[      end if]@
-    for (Py_ssize_t i = 0; i < size; ++i) {
-      @(nested_type) * item = (@(nested_type) *) convert_from_py(
-        PySequence_Fast_GET_ITEM(seq_field, i));
-      if (!item) {
-        Py_DECREF(seq_field);
-        Py_DECREF(field);
-        return NULL;
+    if (PyBytes_Check(seq_field)) {
+      memcpy(dest, PyBytes_AsString(seq_field), size);
+    } else {
+      for (Py_ssize_t i = 0; i < size; ++i) {
+        @(nested_type) * item = (@(nested_type) *) convert_from_py(
+          PySequence_Fast_GET_ITEM(seq_field, i));
+        if (!item) {
+          Py_DECREF(seq_field);
+          Py_DECREF(field);
+          return NULL;
+        }
+        memcpy(&dest[i], item, sizeof(@(nested_type)));
       }
-      memcpy(&dest[i], item, sizeof(@(nested_type)));
     }
     Py_DECREF(seq_field);
 @[    else]@
@@ -211,6 +216,9 @@ nested_type = '%s__%s__%s' % (field.type.pkg_name, 'msg', field.type.type)
     Py_ssize_t size = @(field.type.array_size);
     @primitive_msg_type_to_c(field.type.type) * dest = ros_message->@(field.name);
 @[    end if]@
+    if (PyBytes_Check(seq_field)) {
+      memcpy(dest, PyBytes_AsString(seq_field), size);
+    } else {
     for (Py_ssize_t i = 0; i < size; ++i) {
       PyObject * item = PySequence_Fast_GET_ITEM(seq_field, i);
       if (!item) {
@@ -265,6 +273,7 @@ nested_type = '%s__%s__%s' % (field.type.pkg_name, 'msg', field.type.type)
 @[    if field.type.type != 'string']@
       memcpy(&dest[i], &tmp, sizeof(@primitive_msg_type_to_c(field.type.type)));
 @[    end if]@
+    }
     }
     Py_DECREF(seq_field);
 @[  elif field.type.type == 'char']@
@@ -330,14 +339,17 @@ PyObject * @(spec.base_type.pkg_name)_@(module_name)__convert_to_py(void * raw_r
 {
   /* NOTE(esteve): Call constructor of @(spec.base_type.type) */
   PyObject * _pymessage = NULL;
+  static PyObject * pymessage_class = NULL;
   {
-    PyObject * pymessage_module = PyImport_ImportModule("@(spec.base_type.pkg_name).@(subfolder)._@(module_name)");
-    assert(pymessage_module);
-    PyObject * pymessage_class = PyObject_GetAttrString(pymessage_module, "@(spec.base_type.type)");
-    assert(pymessage_class);
-    Py_DECREF(pymessage_module);
+    if (pymessage_class == NULL) {
+      PyObject * pymessage_module = PyImport_ImportModule("@(spec.base_type.pkg_name).@(subfolder)._@(module_name)");
+      assert(pymessage_module);
+      pymessage_class = PyObject_GetAttrString(pymessage_module, "@(spec.base_type.type)");
+      assert(pymessage_class);
+      Py_DECREF(pymessage_module);
+    }
     _pymessage = PyObject_CallObject(pymessage_class, NULL);
-    Py_DECREF(pymessage_class);
+    //Py_DECREF(pymessage_class);
     if (!_pymessage) {
       return NULL;
     }
@@ -354,8 +366,9 @@ PyObject * @(spec.base_type.pkg_name)_@(module_name)__convert_to_py(void * raw_r
 nested_type = '%s__%s__%s' % (field.type.pkg_name, 'msg', field.type.type)
 }@
     typedef PyObject *(* convert_to_py_signature)(void *);
-    convert_to_py_signature convert_to_py = NULL;
+    static convert_to_py_signature convert_to_py = NULL;
     // get conversion function
+    if (convert_to_py == NULL)
     {
       PyObject * msg_module = PyImport_ImportModule("@(field.type.pkg_name).msg._@convert_camel_case_to_lower_case_underscore(field.type.type)");
       if (!msg_module) {
@@ -423,6 +436,9 @@ nested_type = '%s__%s__%s' % (field.type.pkg_name, 'msg', field.type.type)
     size_t size = @(field.type.array_size);
     @primitive_msg_type_to_c(field.type.type) * src = ros_message->@(field.name);
 @[    end if]@
+@[    if field.type.type == 'uint8']@
+    field = PyBytes_FromStringAndSize((const char*)src, size);
+@[    else]@
     field = PyList_New(size);
     if (!field) {
       return NULL;
@@ -475,6 +491,7 @@ nested_type = '%s__%s__%s' % (field.type.pkg_name, 'msg', field.type.type)
       assert(rc == 0);
 @[    end if]@
     }
+@[    end if]@
     assert(PySequence_Check(field));
 @[  elif field.type.type == 'char']@
     field = Py_BuildValue("C", ros_message->@(field.name));
